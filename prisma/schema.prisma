datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Operation {
  CREATE
  READ
  UPDATE
  DELETE
}

enum Status {
  SHOW
  HIDE
  DELETED
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  rolePermissions RolePermission[]
  // Back-relation for the User model; marked @ignore to avoid exposing it in Prisma Client.
  users           User[]           @relation("UserToRole")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Menu {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  // A menu can have one or many permissions.
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id         Int       @id @default(autoincrement())
  operation  Operation
  // Each permission is associated with a single menu.
  menu       Menu      @relation(fields: [menuId], references: [id])
  menuId     Int
  // Linking table for roles that have this permission.
  rolePermissions RolePermission[]
  // Unique constraint on [menuId, operation] removed as per requirement.
}

model RolePermission {
  id            Int         @id @default(autoincrement())
  role          Role        @relation(fields: [roleId], references: [id])
  roleId        Int
  permission    Permission  @relation(fields: [permissionId], references: [id])
  permissionId  Int

  // Ensure a role cannot be assigned the same permission more than once.
  @@unique([roleId, permissionId])
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String   
  roleId    Int
  // Define the relation using a named relation to match the back-relation in Role.
  role      Role     @relation("UserToRole", fields: [roleId], references: [id])
  ideas       Idea[]
  comments    Comment[]
  reports    Report[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  refreshTokens RefreshToken[]
  departmentId Int  @default(1)
  department  Department  @relation("UserToDepartment", fields: [departmentId], references: [id])
  notifications        Notification[] @relation("UserNotifications")
  notificationsTriggered Notification[] @relation("NotificationsTriggered")
  type         UserType @default(USER) 
  passwordUpdatedAt DateTime?
  disabledInd   Boolean @default(false)
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  ideas       Idea[]
  status      Status    @default(SHOW)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Department {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  ideas       Idea[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users User[] @relation("UserToDepartment") 
}

model Idea {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  status      Status    @default(SHOW)
  
  // Relations
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  department  Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId  Int   @default(0)
  
  // Metrics
  likes       Int       @default(0)
  dislikes    Int       @default(0)
  views       Int       @default(0)
  
  // Comments relation
  comments    Comment[]

  reports    Report[]
  notifications Notification[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id          Int       @id @default(autoincrement())
  content     String
  idea        Idea      @relation(fields: [ideaId], references: [id])
  ideaId      Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      Status    @default(SHOW)
}

enum UserType {
  ADMIN
  USER
}

model AcademicYear {
  id                Int       @id @default(autoincrement())
  year              Int
  startDate         DateTime
  closureDate       DateTime
  finalClosureDate  DateTime
  status            Status    @default(SHOW)
  ideas             Idea[]
  masterSetting     MasterSetting?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Report {
  id                Int       @id @default(autoincrement())
  userId            Int
  user              User      @relation(fields: [userId], references: [id])
  ideaId            Int
  idea              Idea      @relation(fields: [ideaId], references: [id])
  type              String
  detail            String?
  status            Status    @default(SHOW)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

enum NotificationType {
  LIKE
  DISLIKE
  COMMENT
}

model Notification {
  id          Int             @id @default(autoincrement())
  type        NotificationType
  message     String
  isRead      Boolean         @default(false)
  
  // The user who receives the notification
  user        User            @relation("UserNotifications", fields: [userId], references: [id])
  userId      Int
  
  // The user who triggered the notification
  fromUser    User            @relation("NotificationsTriggered", fields: [fromUserId], references: [id])
  fromUserId  Int
  
  // Related idea
  idea        Idea            @relation(fields: [ideaId], references: [id])
  ideaId      Int
  
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model MasterSetting {
  id                      Int           @id @default(autoincrement())
  currentAcademicYearId   Int           @default(0) @unique()
  currentAcademicYear     AcademicYear  @relation(fields: [currentAcademicYearId], references: [id])      
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
}